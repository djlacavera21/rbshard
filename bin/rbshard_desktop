#!/usr/bin/env ruby
require 'gtk3'
require 'base64'
require_relative '../lib/rbshard'

class RbShardDesktop
  KEY_MIN_LEN = 8
  def initialize
    @builder = Gtk::Builder.new
    @builder.add_from_string(UI)
    @window = @builder['window']
    @input  = @builder['input_buffer']
    @output = @builder['output_buffer']
    @key_entry = @builder['key']
    @builder['encode_button'].signal_connect('clicked') { encode }
    @builder['decode_button'].signal_connect('clicked') { decode }
    @builder['open_item'].signal_connect('activate') { open_file }
    @builder['save_item'].signal_connect('activate') { save_file }
    @builder['encrypt_file_item'].signal_connect('activate') { encrypt_file }
    @builder['decrypt_file_item'].signal_connect('activate') { decrypt_file }
    @builder['quit_item'].signal_connect('activate') { Gtk.main_quit }
    @window.signal_connect('destroy') { Gtk.main_quit }
    @window.show_all
  end

  def encode
    data = @input.text
    key = @key_entry.text
    if (err = validate_key(key))
      show_error(err)
      return
    end
    result = Base64.strict_encode64(RbShard.encode(data, key))
    @output.text = result
  rescue => e
    show_error(e.message)
  end

  def decode
    data = @input.text
    key = @key_entry.text
    if (err = validate_key(key))
      show_error(err)
      return
    end
    decoded = RbShard.decode(Base64.strict_decode64(data), key)
    @output.text = decoded
  rescue => e
    show_error(e.message)
  end

  def open_file
    dialog = Gtk::FileChooserDialog.new(
      title: 'Open File',
      parent: @window,
      action: Gtk::FileChooserAction::OPEN,
      buttons: [[Gtk::Stock::OPEN, Gtk::ResponseType::ACCEPT],
                [Gtk::Stock::CANCEL, Gtk::ResponseType::CANCEL]]
    )
    if dialog.run == Gtk::ResponseType::ACCEPT
      @input.text = File.read(dialog.filename)
    end
    dialog.destroy
  end

  def save_file
    dialog = Gtk::FileChooserDialog.new(
      title: 'Save Result',
      parent: @window,
      action: Gtk::FileChooserAction::SAVE,
      buttons: [[Gtk::Stock::SAVE, Gtk::ResponseType::ACCEPT],
                [Gtk::Stock::CANCEL, Gtk::ResponseType::CANCEL]]
    )
    dialog.do_overwrite_confirmation = true
    if dialog.run == Gtk::ResponseType::ACCEPT
      File.write(dialog.filename, @output.text)
    end
    dialog.destroy
  end

  def encrypt_file
    key = @key_entry.text
    if (err = validate_key(key))
      show_error(err)
      return
    end
    open_dialog = Gtk::FileChooserDialog.new(
      title: 'Select File to Encrypt',
      parent: @window,
      action: Gtk::FileChooserAction::OPEN,
      buttons: [[Gtk::Stock::OPEN, Gtk::ResponseType::ACCEPT],
                [Gtk::Stock::CANCEL, Gtk::ResponseType::CANCEL]]
    )
    if open_dialog.run == Gtk::ResponseType::ACCEPT
      data = File.binread(open_dialog.filename)
      encoded = RbShard.encode(data, key)
      save_dialog = Gtk::FileChooserDialog.new(
        title: 'Save Encrypted File',
        parent: @window,
        action: Gtk::FileChooserAction::SAVE,
        buttons: [[Gtk::Stock::SAVE, Gtk::ResponseType::ACCEPT],
                  [Gtk::Stock::CANCEL, Gtk::ResponseType::CANCEL]]
      )
      save_dialog.do_overwrite_confirmation = true
      save_dialog.current_name = File.basename(open_dialog.filename) + '.rbs'
      if save_dialog.run == Gtk::ResponseType::ACCEPT
        File.binwrite(save_dialog.filename, encoded)
        show_info('File encrypted successfully')
      end
      save_dialog.destroy
    end
    open_dialog.destroy
  rescue => e
    show_error(e.message)
  end

  def decrypt_file
    key = @key_entry.text
    if (err = validate_key(key))
      show_error(err)
      return
    end
    open_dialog = Gtk::FileChooserDialog.new(
      title: 'Select File to Decrypt',
      parent: @window,
      action: Gtk::FileChooserAction::OPEN,
      buttons: [[Gtk::Stock::OPEN, Gtk::ResponseType::ACCEPT],
                [Gtk::Stock::CANCEL, Gtk::ResponseType::CANCEL]]
    )
    if open_dialog.run == Gtk::ResponseType::ACCEPT
      data = File.binread(open_dialog.filename)
      decoded = RbShard.decode(data, key)
      save_dialog = Gtk::FileChooserDialog.new(
        title: 'Save Decrypted File',
        parent: @window,
        action: Gtk::FileChooserAction::SAVE,
        buttons: [[Gtk::Stock::SAVE, Gtk::ResponseType::ACCEPT],
                  [Gtk::Stock::CANCEL, Gtk::ResponseType::CANCEL]]
      )
      save_dialog.do_overwrite_confirmation = true
      save_dialog.current_name = File.basename(open_dialog.filename, '.rbs')
      if save_dialog.run == Gtk::ResponseType::ACCEPT
        File.binwrite(save_dialog.filename, decoded)
        show_info('File decrypted successfully')
      end
      save_dialog.destroy
    end
    open_dialog.destroy
  rescue => e
    show_error(e.message)
  end

  def validate_key(key)
    return 'Key is required' if key.to_s.empty?
    return "Key must be at least #{KEY_MIN_LEN} characters" if key.length < KEY_MIN_LEN
    nil
  end

  def show_error(message)
    dialog = Gtk::MessageDialog.new(
      parent: @window,
      flags: :destroy_with_parent,
      type: :error,
      buttons_type: :close,
      message: message
    )
    dialog.run
    dialog.destroy
  end

  def show_info(message)
    dialog = Gtk::MessageDialog.new(
      parent: @window,
      flags: :destroy_with_parent,
      type: :info,
      buttons_type: :close,
      message: message
    )
    dialog.run
    dialog.destroy
  end

  UI = <<~UI
    <interface>
      <requires lib="gtk+" version="3.0"/>
      <object class="GtkWindow" id="window">
        <property name="title">RbShard Desktop</property>
        <child>
          <object class="GtkBox" id="main_box">
            <property name="orientation">vertical</property>
            <property name="spacing">5</property>
            <child>
              <object class="GtkMenuBar" id="menu_bar">
                <child>
                  <object class="GtkMenuItem" id="file_menu_item">
                    <property name="label">File</property>
                    <child type="submenu">
                      <object class="GtkMenu" id="file_menu">
                        <child>
                          <object class="GtkMenuItem" id="open_item">
                            <property name="label">Open...</property>
                          </object>
                        </child>
                        <child>
                          <object class="GtkMenuItem" id="save_item">
                            <property name="label">Save Result...</property>
                          </object>
                        </child>
                        <child>
                          <object class="GtkMenuItem" id="encrypt_file_item">
                            <property name="label">Encrypt File...</property>
                          </object>
                        </child>
                        <child>
                          <object class="GtkMenuItem" id="decrypt_file_item">
                            <property name="label">Decrypt File...</property>
                          </object>
                        </child>
                        <child>
                          <object class="GtkMenuItem" id="quit_item">
                            <property name="label">Quit</property>
                          </object>
                        </child>
                      </object>
                    </child>
                  </object>
                </child>
              </object>
            </child>
            <child>
              <object class="GtkLabel" id="input_label">
                <property name="label">Input</property>
                <attributes><attribute name="weight" value="bold"/></attributes>
              </object>
            </child>
            <child>
              <object class="GtkScrolledWindow">
                <property name="vexpand">true</property>
                <child>
                  <object class="GtkTextView" id="input">
                    <property name="buffer">input_buffer</property>
                  </object>
                </child>
              </object>
            </child>
            <child>
              <object class="GtkBox" id="key_box">
                <property name="orientation">horizontal</property>
                <child>
                  <object class="GtkLabel" id="key_label">
                    <property name="label">Key:</property>
                  </object>
                </child>
                <child>
                  <object class="GtkEntry" id="key"/>
                </child>
              </object>
            </child>
            <child>
              <object class="GtkBox" id="button_box">
                <property name="orientation">horizontal</property>
                <property name="spacing">5</property>
                <child>
                  <object class="GtkButton" id="encode_button">
                    <property name="label">Encode</property>
                  </object>
                </child>
                <child>
                  <object class="GtkButton" id="decode_button">
                    <property name="label">Decode</property>
                  </object>
                </child>
              </object>
            </child>
            <child>
              <object class="GtkLabel" id="output_label">
                <property name="label">Result</property>
                <attributes><attribute name="weight" value="bold"/></attributes>
              </object>
            </child>
            <child>
              <object class="GtkScrolledWindow">
                <property name="vexpand">true</property>
                <child>
                  <object class="GtkTextView" id="output">
                    <property name="editable">false</property>
                    <property name="buffer">output_buffer</property>
                  </object>
                </child>
              </object>
            </child>
          </object>
        </child>
      </object>
      <object class="GtkTextBuffer" id="input_buffer"/>
      <object class="GtkTextBuffer" id="output_buffer"/>
    </interface>
  UI
end

RbShardDesktop.new
Gtk.main
